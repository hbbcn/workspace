
1、sql注入问题
    比如在一个登陆界面,要求用户输入用户名和密码:
    用户名:     ' or 1=1 --
    密     码:
    点登陆,如若没有做特殊处理,而只是一条带条件的查询语句如:
    "select id,username,password,email from t_user where username = ? and password = ?";
    String sql="select * from users where username='"+userName+"' and password='"+password+"' "
    那么这个非法用户就很得意的登陆进去了.(当然现在的有些语言的数据库API已经处理了这些问题)
    这是为什么呢?我们来看看这条语句,将用户输入的数据替换后得到这样一条语句:
    select * from users where username='' or 1=1 --' and password=''
    为了更明白些，可以将其复制到SQL分析器中，将会发现，这条语句会将数据库的数据全部读出来，为什么呢？
    很简单,看到条件后面 username='' or 1=1 用户名等于 '' 或 1=1 那么这个条件一定会成功，然后后面加两个-，这意味着什么？
　  没错，注释，它将后面的语句注释，让他们不起作用，这样就可以顺利的把数据库中的数据读取出来了。

2、   * 区别：
      *      #{}:是以预编译的形式，将参数设置到sql语句中：和PrepareStatement一样:防止sql注入
      *      ${}:取出的值直接拼装在sql语句中会有安全问题 类似于Statement
      *      大多情况下：我们参数的值都应该去使用#{}
      *
      *      原生jdbc不支持占位符的地方我们就可以使用${}进行取值
      *      比如分表：按照年份分表拆分