package com.sias.exer3;

import java.util.*;

public class QuickSort {

	public static void main(String[] args) {
		QuickSort test = new QuickSort();
		int[] arr = { 5, 9, 7, 4, 8, 11, 6, 1, 10, 9, 20, 4 };
		System.out.println(Arrays.toString(arr));
		test.sort(arr, 0, 11);
		System.out.println(Arrays.toString(arr));

	}

	public void sort(int[] a, int low, int high) {
		int i = low;
		int pow = a[low];
		
		while (high >= low) {
			while (high > low) {

				if (a[low] > pow)
					break;
				else
					low++;
			}
			while (high > low) {

				if (a[high] < pow)
					break;
				else
					high--;
			}
			int temp = a[low];
			a[low] = a[high];
			a[high] = temp;

		}
		int j = a[low];
		a[low] = a [i];
		
		a[i] = j;

		// 对左边进行排序递归算法

	}

//		int[] arr = { 5, 9, 7, 4, 8, 11, 6, 1, 10, 9, 20, 4 };
//		System.out.println(Arrays.toString(arr));
//		sort(arr);
//		System.out.println(Arrays.toString(arr));
//	}
//
//	public static void sort(int[] a) {
//		if (a.length > 0) {
//			sort(a, 0, a.length - 1);
//		}
//
//	}
//
//	public static void sort(int[] a, int low, int height) {
//		int i = low;
//		int j = height;
//		if (i > j) {// 放在k之前，防止下标越界
//			return;
//		}
//		int k = a[i];
//
//		while (i < j) {
//			while (i < j && a[j] > k) { // 找出小的数
//				j--;
//			}
//			while (i < j && a[i] <= k) { // 找出大的数
//				i++;
//			}
//			if (i < j) {// 交换
//				int swap = a[i];
//				a[i] = a[j];
//				a[j] = swap;
//			}
//
//		}
//		// 交换K
//		k = a[i];
//		a[i] = a[low];
//		a[low] = k;
//
//		// 对左边进行排序,递归算法
//		sort(a, low, i - 1);
//		// 对右边进行排序
//		sort(a, i + 1, height);
//	}

}
